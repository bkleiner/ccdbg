#include "disassembly.h"

#include <fmt/format.h>

#include "ihex.h"
#include "line_parser.h"

namespace debug::core {

  static instruction instructions[] = {
      {0x00, ' ', 1, "NOP"},
      {0x01, 'A', 2, "AJMP %A"},
      {0x02, 'L', 3, "LJMP %l"},
      {0x03, ' ', 1, "RR A"},
      {0x04, ' ', 1, "INC A"},
      {0x05, ' ', 2, "INC %a"},
      {0x06, ' ', 1, "INC @R0"},
      {0x07, ' ', 1, "INC @R1"},
      {0x08, ' ', 1, "INC R0"},
      {0x09, ' ', 1, "INC R1"},
      {0x0a, ' ', 1, "INC R2"},
      {0x0b, ' ', 1, "INC R3"},
      {0x0c, ' ', 1, "INC R4"},
      {0x0d, ' ', 1, "INC R5"},
      {0x0e, ' ', 1, "INC R6"},
      {0x0f, ' ', 1, "INC R7"},
      {0x10, 'R', 3, "JBC %b,%R"},
      {0x11, 'a', 2, "ACALL %A"},
      {0x12, 'l', 3, "LCALL %l", true},
      {0x13, ' ', 1, "RRC A"},
      {0x14, ' ', 1, "DEC A"},
      {0x15, ' ', 2, "DEC %a"},
      {0x16, ' ', 1, "DEC @R0"},
      {0x17, ' ', 1, "DEC @R1"},
      {0x18, ' ', 1, "DEC R0"},
      {0x19, ' ', 1, "DEC R1"},
      {0x1a, ' ', 1, "DEC R2"},
      {0x1b, ' ', 1, "DEC R3"},
      {0x1c, ' ', 1, "DEC R4"},
      {0x1d, ' ', 1, "DEC R5"},
      {0x1e, ' ', 1, "DEC R6"},
      {0x1f, ' ', 1, "DEC R7"},
      {0x20, 'R', 3, "JB %b,%R"},
      {0x21, 'A', 2, "AJMP %A"},
      {0x22, '_', 1, "RET"},
      {0x23, ' ', 1, "RL A"},
      {0x24, ' ', 2, "ADD A,#%d"},
      {0x25, ' ', 2, "ADD A,%a"},
      {0x26, ' ', 1, "ADD A,@R0"},
      {0x27, ' ', 1, "ADD A,@R1"},
      {0x28, ' ', 1, "ADD A,R0"},
      {0x29, ' ', 1, "ADD A,R1"},
      {0x2a, ' ', 1, "ADD A,R2"},
      {0x2b, ' ', 1, "ADD A,R3"},
      {0x2c, ' ', 1, "ADD A,R4"},
      {0x2d, ' ', 1, "ADD A,R5"},
      {0x2e, ' ', 1, "ADD A,R6"},
      {0x2f, ' ', 1, "ADD A,R7"},
      {0x30, 'R', 3, "JNB %b,%R"},
      {0x31, 'a', 2, "ACALL %A", true},
      {0x32, '_', 1, "RETI"},
      {0x33, ' ', 1, "RLC A"},
      {0x34, ' ', 2, "ADDC A,#%d"},
      {0x35, ' ', 2, "ADDC A,%a"},
      {0x36, ' ', 1, "ADDC A,@R0"},
      {0x37, ' ', 1, "ADDC A,@R1"},
      {0x38, ' ', 1, "ADDC A,R0"},
      {0x39, ' ', 1, "ADDC A,R1"},
      {0x3a, ' ', 1, "ADDC A,R2"},
      {0x3b, ' ', 1, "ADDC A,R3"},
      {0x3c, ' ', 1, "ADDC A,R4"},
      {0x3d, ' ', 1, "ADDC A,R5"},
      {0x3e, ' ', 1, "ADDC A,R6"},
      {0x3f, ' ', 1, "ADDC A,R7"},
      {0x40, 'r', 2, "JC %r"},
      {0x41, 'A', 2, "AJMP %A"},
      {0x42, ' ', 2, "ORL %a,A"},
      {0x43, ' ', 3, "ORL %a,#%D"},
      {0x44, ' ', 2, "ORL A,#%d"},
      {0x45, ' ', 2, "ORL A,%a"},
      {0x46, ' ', 1, "ORL A,@R0"},
      {0x47, ' ', 1, "ORL A,@R1"},
      {0x48, ' ', 1, "ORL A,R0"},
      {0x49, ' ', 1, "ORL A,R1"},
      {0x4a, ' ', 1, "ORL A,R2"},
      {0x4b, ' ', 1, "ORL A,R3"},
      {0x4c, ' ', 1, "ORL A,R4"},
      {0x4d, ' ', 1, "ORL A,R5"},
      {0x4e, ' ', 1, "ORL A,R6"},
      {0x4f, ' ', 1, "ORL A,R7"},
      {0x50, 'r', 2, "JNC %r"},
      {0x51, 'a', 2, "ACALL %A", true},
      {0x52, ' ', 2, "ANL %a,A"},
      {0x53, ' ', 3, "ANL %a,#%D"},
      {0x54, ' ', 2, "ANL A,#%d"},
      {0x55, ' ', 2, "ANL A,%a"},
      {0x56, ' ', 1, "ANL A,@R0"},
      {0x57, ' ', 1, "ANL A,@R1"},
      {0x58, ' ', 1, "ANL A,R0"},
      {0x59, ' ', 1, "ANL A,R1"},
      {0x5a, ' ', 1, "ANL A,R2"},
      {0x5b, ' ', 1, "ANL A,R3"},
      {0x5c, ' ', 1, "ANL A,R4"},
      {0x5d, ' ', 1, "ANL A,R5"},
      {0x5e, ' ', 1, "ANL A,R6"},
      {0x5f, ' ', 1, "ANL A,R7"},
      {0x60, 'r', 2, "JZ %r"},
      {0x61, 'A', 2, "AJMP %A"},
      {0x62, ' ', 2, "XRL %a,A"},
      {0x63, ' ', 3, "XRL %a,#%D"},
      {0x64, ' ', 2, "XRL A,#%d"},
      {0x65, ' ', 2, "XRL A,%a"},
      {0x66, ' ', 1, "XRL A,@R0"},
      {0x67, ' ', 1, "XRL A,@R1"},
      {0x68, ' ', 1, "XRL A,R0"},
      {0x69, ' ', 1, "XRL A,R1"},
      {0x6a, ' ', 1, "XRL A,R2"},
      {0x6b, ' ', 1, "XRL A,R3"},
      {0x6c, ' ', 1, "XRL A,R4"},
      {0x6d, ' ', 1, "XRL A,R5"},
      {0x6e, ' ', 1, "XRL A,R6"},
      {0x6f, ' ', 1, "XRL A,R7"},
      {0x70, 'r', 2, "JNZ %r"},
      {0x71, 'a', 2, "ACALL %A", true},
      {0x72, ' ', 2, "ORL C,%b"},
      {0x73, '_', 1, "JMP @A+DPTR"},
      {0x74, ' ', 2, "MOV A,#%d"},
      {0x75, ' ', 3, "MOV %a,#%D"},
      {0x76, ' ', 2, "MOV @R0,#%d"},
      {0x77, ' ', 2, "MOV @R1,#%d"},
      {0x78, ' ', 2, "MOV R0,#%d"},
      {0x79, ' ', 2, "MOV R1,#%d"},
      {0x7a, ' ', 2, "MOV R2,#%d"},
      {0x7b, ' ', 2, "MOV R3,#%d"},
      {0x7c, ' ', 2, "MOV R4,#%d"},
      {0x7d, ' ', 2, "MOV R5,#%d"},
      {0x7e, ' ', 2, "MOV R6,#%d"},
      {0x7f, ' ', 2, "MOV R7,#%d"},
      {0x80, 's', 2, "SJMP %r"},
      {0x81, 'A', 2, "AJMP %A"},
      {0x82, ' ', 2, "ANL C,%b"},
      {0x83, ' ', 1, "MOVC A,@A+PC"},
      {0x84, ' ', 1, "DIV AB"},
      {0x85, ' ', 3, "MOV %8,%a"},
      {0x86, ' ', 2, "MOV %a,@R0"},
      {0x87, ' ', 2, "MOV %a,@R1"},
      {0x88, ' ', 2, "MOV %a,R0"},
      {0x89, ' ', 2, "MOV %a,R1"},
      {0x8a, ' ', 2, "MOV %a,R2"},
      {0x8b, ' ', 2, "MOV %a,R3"},
      {0x8c, ' ', 2, "MOV %a,R4"},
      {0x8d, ' ', 2, "MOV %a,R5"},
      {0x8e, ' ', 2, "MOV %a,R6"},
      {0x8f, ' ', 2, "MOV %a,R7"},
      {0x90, ' ', 3, "MOV DPTR,#%6"},
      {0x91, 'a', 2, "ACALL %A", true},
      {0x92, ' ', 2, "MOV %b,C"},
      {0x93, ' ', 1, "MOVC A,@A+DPTR"},
      {0x94, ' ', 2, "SUBB A,#%d"},
      {0x95, ' ', 2, "SUBB A,%a"},
      {0x96, ' ', 1, "SUBB A,@R0"},
      {0x97, ' ', 1, "SUBB A,@R1"},
      {0x98, ' ', 1, "SUBB A,R0"},
      {0x99, ' ', 1, "SUBB A,R1"},
      {0x9a, ' ', 1, "SUBB A,R2"},
      {0x9b, ' ', 1, "SUBB A,R3"},
      {0x9c, ' ', 1, "SUBB A,R4"},
      {0x9d, ' ', 1, "SUBB A,R5"},
      {0x9e, ' ', 1, "SUBB A,R6"},
      {0x9f, ' ', 1, "SUBB A,R7"},
      {0xa0, ' ', 2, "ORL C,/%b"},
      {0xa1, 'A', 2, "AJMP %A"},
      {0xa2, ' ', 2, "MOV C,%b"},
      {0xa3, ' ', 1, "INC DPTR"},
      {0xa4, ' ', 1, "MUL AB"},
      {0xa5, '_', 1, "-"},
      {0xa6, ' ', 2, "MOV @R0,%a"},
      {0xa7, ' ', 2, "MOV @R1,%a"},
      {0xa8, ' ', 2, "MOV R0,%a"},
      {0xa9, ' ', 2, "MOV R1,%a"},
      {0xaa, ' ', 2, "MOV R2,%a"},
      {0xab, ' ', 2, "MOV R3,%a"},
      {0xac, ' ', 2, "MOV R4,%a"},
      {0xad, ' ', 2, "MOV R5,%a"},
      {0xae, ' ', 2, "MOV R6,%a"},
      {0xaf, ' ', 2, "MOV R7,%a"},
      {0xb0, ' ', 2, "ANL C,/%b"},
      {0xb1, 'a', 2, "ACALL %A", true},
      {0xb2, ' ', 2, "CPL %b"},
      {0xb3, ' ', 1, "CPL C"},
      {0xb4, 'R', 3, "CJNE A,#%d,%R"},
      {0xb5, 'R', 3, "CJNE A,%a,%R"},
      {0xb6, 'R', 3, "CJNE @R0,#%d,%R"},
      {0xb7, 'R', 3, "CJNE @R1,#%d,%R"},
      {0xb8, 'R', 3, "CJNE R0,#%d,%R"},
      {0xb9, 'R', 3, "CJNE R1,#%d,%R"},
      {0xba, 'R', 3, "CJNE R2,#%d,%R"},
      {0xbb, 'R', 3, "CJNE R3,#%d,%R"},
      {0xbc, 'R', 3, "CJNE R4,#%d,%R"},
      {0xbd, 'R', 3, "CJNE R5,#%d,%R"},
      {0xbe, 'R', 3, "CJNE R6,#%d,%R"},
      {0xbf, 'R', 3, "CJNE R7,#%d,%R"},
      {0xc0, ' ', 2, "PUSH %a"},
      {0xc1, 'A', 2, "AJMP %A"},
      {0xc2, ' ', 2, "CLR %b"},
      {0xc3, ' ', 1, "CLR C"},
      {0xc4, ' ', 1, "SWAP A"},
      {0xc5, ' ', 2, "XCH A,%a"},
      {0xc6, ' ', 1, "XCH A,@R0"},
      {0xc7, ' ', 1, "XCH A,@R1"},
      {0xc8, ' ', 1, "XCH A,R0"},
      {0xc9, ' ', 1, "XCH A,R1"},
      {0xca, ' ', 1, "XCH A,R2"},
      {0xcb, ' ', 1, "XCH A,R3"},
      {0xcc, ' ', 1, "XCH A,R4"},
      {0xcd, ' ', 1, "XCH A,R5"},
      {0xce, ' ', 1, "XCH A,R6"},
      {0xcf, ' ', 1, "XCH A,R7"},
      {0xd0, ' ', 2, "POP %a"},
      {0xd1, 'a', 2, "ACALL %A", true},
      {0xd2, ' ', 2, "SETB %b"},
      {0xd3, ' ', 1, "SETB C"},
      {0xd4, ' ', 1, "DA A"},
      {0xd5, 'R', 3, "DJNZ %a,%R"},
      {0xd6, ' ', 1, "XCHD A,@R0"},
      {0xd7, ' ', 1, "XCHD A,@R1"},
      {0xd8, 'r', 2, "DJNZ R0,%r"},
      {0xd9, 'r', 2, "DJNZ R1,%r"},
      {0xda, 'r', 2, "DJNZ R2,%r"},
      {0xdb, 'r', 2, "DJNZ R3,%r"},
      {0xdc, 'r', 2, "DJNZ R4,%r"},
      {0xdd, 'r', 2, "DJNZ R5,%r"},
      {0xde, 'r', 2, "DJNZ R6,%r"},
      {0xdf, 'r', 2, "DJNZ R7,%r"},
      {0xe0, ' ', 1, "MOVX A,@DPTR"},
      {0xe1, 'A', 2, "AJMP %A"},
      {0xe2, ' ', 1, "MOVX A,@R0"},
      {0xe3, ' ', 1, "MOVX A,@R1"},
      {0xe4, ' ', 1, "CLR A"},
      {0xe5, ' ', 2, "MOV A,%a"},
      {0xe6, ' ', 1, "MOV A,@R0"},
      {0xe7, ' ', 1, "MOV A,@R1"},
      {0xe8, ' ', 1, "MOV A,R0"},
      {0xe9, ' ', 1, "MOV A,R1"},
      {0xea, ' ', 1, "MOV A,R2"},
      {0xeb, ' ', 1, "MOV A,R3"},
      {0xec, ' ', 1, "MOV A,R4"},
      {0xed, ' ', 1, "MOV A,R5"},
      {0xee, ' ', 1, "MOV A,R6"},
      {0xef, ' ', 1, "MOV A,R7"},
      {0xf0, ' ', 1, "MOVX @DPTR,A"},
      {0xf1, 'a', 2, "ACALL %A", true},
      {0xf2, ' ', 1, "MOVX @R0,A"},
      {0xf3, ' ', 1, "MOVX @R1,A"},
      {0xf4, ' ', 1, "CPL A"},
      {0xf5, ' ', 2, "MOV %a,A"},
      {0xf6, ' ', 1, "MOV @R0,A"},
      {0xf7, ' ', 1, "MOV @R1,A"},
      {0xf8, ' ', 1, "MOV R0,A"},
      {0xf9, ' ', 1, "MOV R1,A"},
      {0xfa, ' ', 1, "MOV R2,A"},
      {0xfb, ' ', 1, "MOV R3,A"},
      {0xfc, ' ', 1, "MOV R4,A"},
      {0xfd, ' ', 1, "MOV R5,A"},
      {0xfe, ' ', 1, "MOV R6,A"},
      {0xff, ' ', 1, "MOV R7,A"},
      {0, 0, 0, ""},
  };

  void disassembly::load_file(std::string filename) {
    uint8_t data[65536];
    uint32_t start = 0, end = 0;
    ihex_load_file(filename.c_str(), (char *)data, &start, &end);
    dissasemble(data + start, end - start);
  }

  std::string disassembly::get_source(LINE_NUM line_num) {
    if (line_num == 0 || line_num >= lines.size()) {
      return "invalid disassembly offset";
    }

    const auto &l = lines[line_num - 1];
    return fmt::format("  {} //{:#x}:{:#x}", l.instr.mnemonic, l.start_addr, l.end_addr);
  }

  std::string disassembly::get_source(ADDR addr) {
    return get_source(get_line_number(addr));
  }

  std::string disassembly::get_source() {
    std::string result = "";
    for (auto &l : lines) {
      result += fmt::format("  {} //{:#x}:{:#x}\n", l.instr.mnemonic, l.start_addr, l.end_addr);
    }
    return result;
  }

  LINE_NUM disassembly::get_line_number(ADDR addr) {
    for (size_t i = 0; i < lines.size(); i++) {
      if (addr >= lines[i].start_addr && addr < lines[i].end_addr) {
        return i + 1;
      }
    }
    return INVALID_LINE;
  }

  void disassembly::dissasemble(uint8_t *buf, size_t size) {
    size_t read = 0;

    while (read < size) {
      const auto code = buf[read];
      const auto instr = instructions[code];
      lines.emplace_back(ADDR(read), ADDR(read + instr.length), instr);
      read += instr.length;
    }
  }
} // namespace debug::core